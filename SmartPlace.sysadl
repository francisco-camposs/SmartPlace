Model SysADLModel ; package SmartPlaceDUD {  unit Celsius { dimension = Temperatura } dimension Temperatura } Requirement RequisitosSmartPlace ( 0 ) { text = "o Sistema deve satisfazer os requisitos funcionais e não funcionais." } Requirement GerenciarLugarFR ( 1 ) { text = "O sistema deve ser capaz de gerenciar os ar-condicionados e as luzes da sala baseados nos dados de presença." derive RequisitosSmartPlace ;    }  Requirement QualidadeNFR ( 2 ) { text = "O sistema deve satisfazer os requisitos de disponibilidade e modificabilidade." derive RequisitosSmartPlace ;   } Requirement MonitoramentoWebFR ( 3 ) { text = "O sistema deve ser capaz exibir o status dos ar-condicionados e os dados de presença em uma interface web." derive RequisitosSmartPlace ;   } package SmartPlaceVLD { enum CmdLampada { ligar_luzes , desligar_luzes } enum ComandoAC { ligar_ar_condicionado , desligar_ar_condicionado , aumentar_temperatura , diminuir_temperatura } value type Boolean { } value type Int { } value type String { } value type Real { } value type Void { } value type TemperaturaCelsius { unit = SmartPlaceDUD.Celsius } datatype ACComando { attributes : arCondicionado : ComandoAC ; } datatype LampadaCmd { attributes : lampada : CmdLampada ; }  value type Video { } enum StatusEquipamento { ligado , desligado } } package SmartPlacePTD { import SmartPlaceVLD ; port def ComandoACIPT { flow in ACComando } port def ComandoACOPT { flow out ComandoAC } port def CmdLampadaIPT { flow in LampadaCmd } port def CmdLampadaOPT { flow out LampadaCmd } port def QtndPessoasIPT { flow in Int }  port def AlguemPresenteIPT { flow in Boolean }    port def CelsiusIPT { flow in TemperaturaCelsius }    port def VideoIPT { flow in Video } port def VideoOPT { flow out Video } port def StatusACIPT { flow in StatusEquipamento } port def QtndPessoasOPT { flow out Int } port def AlguemPresenteOPT { flow out Boolean }  port def CelsiusOPT { flow out TemperaturaCelsius }     port def StatusACOPT { flow out StatusEquipamento } } package SmartPlaceCND { import SmartPlacePTD ; connector def ComandoACCN { participants : ~ comandoArCondicionadoIPT1 : ComandoACIPT ; ~ comandoArCondicionadoOPT1 : ComandoACOPT ; flows : ACComando from comandoArCondicionadoIPT1 to comandoArCondicionadoOPT1 } connector def CmdLampadaCN { participants : ~ comandoLampadaIPT1 : CmdLampadaIPT ; ~ comandoLampadaOPT1 : CmdLampadaOPT ; flows : LampadaCmd from comandoLampadaIPT1 to comandoLampadaOPT1 }    connector def ACStatusCN { participants : ~ statusArCondicionadoIPT1 : StatusACIPT ; ~ statusArCondicionadoOPT1 : StatusACOPT ; flows : StatusEquipamento from statusArCondicionadoIPT1 to statusArCondicionadoOPT1 }  connector def VideoCN { participants : ~ videoIPT1 : VideoIPT ; ~ videoOPT1 : VideoOPT ; flows : Video from videoIPT1 to videoOPT1 }  connector def QtndPessoasCN { participants : ~ quantidadePessoasIPT1 : QtndPessoasIPT ; ~ quantidadePessoasOPT1 : QtndPessoasOPT ; flows : Int from quantidadePessoasIPT1 to quantidadePessoasOPT1 }   connector def AlguemPresenteCN { participants : ~ alguemPresenteIPT1 : AlguemPresenteIPT ; ~ alguemPresenteOPT1 : AlguemPresenteOPT ; flows : Boolean from alguemPresenteIPT1 to alguemPresenteOPT1 }  connector def CelciusCN { participants : ~ celsciusIPT1 : CelsiusIPT ; ~ CelciusOPT1 : CelsiusOPT ; flows : TemperaturaCelsius from celsciusIPT1 to CelciusOPT1 } } package SmartPlaceCPD { import SmartPlaceCND ; import SmartPlacePTD ; import SmartPlaceVLD ; boundary
	component def CameraBCP { ports : videoOPT : VideoOPT ; } boundary
	component def SensorDePresencaBCP { ports : sensorPresencaOPT : AlguemPresenteOPT ; } boundary
	component def LeitorDeTemperaturaBCP { ports :  celsciusOPT : CelsiusOPT ; } boundary
	component def ServidorWebBCP { ports :    statusACIPT : StatusACIPT ;  alguemPresenteIPT : AlguemPresenteIPT ; } boundary
	component def ArCondicionadoBCP { ports : comandoACIPT : ComandoACIPT ;   } boundary
	component def LampadasBCP { ports : cmdLampadaIPT : CmdLampadaIPT ; }
	component def ControladorPresencaCP { ports : videoIPT2 : VideoIPT ; sensorIPT1 : AlguemPresenteIPT ;   presencaOPT : AlguemPresenteOPT ; configuration { components : ProcessadorDeVideoMLCP : ProcessadorDeVideoMLCP { using ports : videoIPT : VideoIPT ; qtndPessoasOPT : QtndPessoasOPT ; } ModuloPresencaCP : ModuloPresencaCP { using ports : qtndPessoa : QtndPessoasIPT ; presenca : AlguemPresenteIPT ; presencaOPT : AlguemPresenteOPT ; } connectors : qtndPessoaCN : QtndPessoasCN bindings qtndPessoasOPT = qtndPessoa ; delegations : videoIPT to videoIPT2 presencaOPT to presencaOPT presenca to sensorIPT1 } }
	component def ControladorLampadaCP { ports : cmdLampadaOPT1 : CmdLampadaOPT ;  presencaIPT : AlguemPresenteIPT ; }
	component def ControladorACCP { ports :  ACComandoOPT1 : ComandoACOPT ; statusACOPT1 : StatusACOPT ;  celciusIPT1 : CelsiusIPT ;  sensor1IPT : CelsiusIPT ; sensor2IPT : CelsiusIPT ;  presenca : AlguemPresenteIPT ; configuration { components :  ModuloMonitoramentoACCP : ModuloMonitoramentoACCP { using ports : statusACOPT : StatusACOPT ; presencaIPT2 : AlguemPresenteIPT ; } ModuloControleACCP : ModuloControleACCP { using ports : comandoACOPT : ComandoACOPT ; sensor1IPT : CelsiusIPT ; sensor2IPT : CelsiusIPT ; presenca : AlguemPresenteIPT ; temperaturaIPT : CelsiusIPT ; statusIPT : StatusACIPT ; } connectors : arCondCN : ACStatusCN bindings statusACOPT = statusIPT ; delegations : presencaIPT2 to presenca statusACOPT to statusACOPT1 sensor2IPT to sensor2IPT sensor1IPT to sensor1IPT temperaturaIPT to celciusIPT1 presenca to presenca comandoACOPT to ACComandoOPT1 } }
	component def SistemaSmartPlace { ports : celsiusIPT : CelsiusIPT ; presencaIPT : AlguemPresenteIPT ; videoIPT : VideoIPT ; statusACOPT : StatusACOPT ;    cmdLampadaOPT : CmdLampadaOPT ; comandoACOPT : ComandoACOPT ; sensor1IPT : CelsiusIPT ; sensor2IPT : CelsiusIPT ; presencaOPT : AlguemPresenteOPT ; configuration { components :     ControladorPresencaCP : ControladorPresencaCP { using ports : videoIPT2 : VideoIPT ; sensorIPT1 : AlguemPresenteIPT ; presencaOPT : AlguemPresenteOPT ; } ControladorACCP : ControladorACCP { using ports : ACComandoOPT1 : ComandoACOPT ; statusACOPT1 : StatusACOPT ; celciusIPT1 : CelsiusIPT ; sensor1IPT : CelsiusIPT ; sensor2IPT : CelsiusIPT ; presenca : AlguemPresenteIPT ; } ControladorLampadaCP : ControladorLampadaCP { using ports : cmdLampadaOPT1 : CmdLampadaOPT ; presencaIPT : AlguemPresenteIPT ; } connectors : presencaCN1 : AlguemPresenteCN bindings presencaOPT = presenca ; presencaCN2 : AlguemPresenteCN bindings presencaOPT = presencaIPT ; delegations : videoIPT2 to videoIPT sensorIPT1 to presencaIPT presencaOPT to presencaOPT celciusIPT1 to celsiusIPT sensor1IPT to sensor1IPT sensor2IPT to sensor2IPT ACComandoOPT1 to comandoACOPT cmdLampadaOPT1 to cmdLampadaOPT statusACOPT1 to statusACOPT } }
	component def SmartPlaceCP { configuration { components :        LampadasBCP : LampadasBCP { using ports : cmdLampadaIPT : CmdLampadaIPT ; } LeitorDeTemperaturaBCP : LeitorDeTemperaturaBCP { using ports : celsciusOPT : CelsiusOPT ; } SensorDePresencaBCP : SensorDePresencaBCP { using ports : sensorPresencaOPT : AlguemPresenteOPT ; } ServidorWebBCP : ServidorWebBCP { using ports : statusACIPT : StatusACIPT ; alguemPresenteIPT : AlguemPresenteIPT ; } SensorTmp1BCP : SensorTmp1BCP { using ports : tempCelciusOPT1 : CelsiusOPT ; } SensorTmp2BCP : SensorTmp2BCP { using ports : tempCelciusOPT2 : CelsiusOPT ; } CameraBCP : CameraBCP { using ports : videoOPT : VideoOPT ; } ArCondicionadoBCP : ArCondicionadoBCP { using ports : comandoACIPT : ComandoACIPT ; }  SistemaSmartPlace : SistemaSmartPlace { using ports : celsiusIPT : CelsiusIPT ; presencaIPT : AlguemPresenteIPT ; videoIPT : VideoIPT ; statusACOPT : StatusACOPT ; cmdLampadaOPT : CmdLampadaOPT ; comandoACOPT : ComandoACOPT ; sensor1IPT : CelsiusIPT ; sensor2IPT : CelsiusIPT ; presencaOPT : AlguemPresenteOPT ; } connectors :         presenca2CN : AlguemPresenteCN bindings presencaOPT = alguemPresenteIPT ; statusAC2CN : ACStatusCN bindings statusACOPT = statusACIPT ; comandoACCN : ComandoACCN bindings comandoACOPT = comandoACIPT ; sensor1CN : CelciusCN bindings tempCelciusOPT1 = sensor1IPT ; sensor2CN : CelciusCN bindings tempCelciusOPT2 = sensor2IPT ; temperaturaCN : CelciusCN bindings celsciusOPT = celsiusIPT ; presenca1CN : AlguemPresenteCN bindings sensorPresencaOPT = presencaIPT ; videoCN : VideoCN bindings videoOPT = videoIPT ; lampadaCmdCN : CmdLampadaCN bindings cmdLampadaOPT = cmdLampadaIPT ; } } component def ProcessadorDeVideoMLCP { ports : videoIPT : VideoIPT ; qtndPessoasOPT : QtndPessoasOPT ; }
	component def ModuloPresencaCP { ports : qtndPessoa : QtndPessoasIPT ; presenca : AlguemPresenteIPT ; presencaOPT : AlguemPresenteOPT ; } component def ModuloControleACCP { ports :  comandoACOPT : ComandoACOPT ;   sensor1IPT : CelsiusIPT ; sensor2IPT : CelsiusIPT ; presenca : AlguemPresenteIPT ; temperaturaIPT : CelsiusIPT ; statusIPT : StatusACIPT ; }
	component def ModuloMonitoramentoACCP { ports :  statusACOPT : StatusACOPT ;    presenca : AlguemPresenteIPT ; }    boundary
	component def SensorTmp1BCP { ports : tempCelciusOPT1 : CelsiusOPT ; } boundary
	component def SensorTmp2BCP { ports : tempCelciusOPT2 : CelsiusOPT ; } activity def ModuloControleArCondAC ( sensor1 : TemperaturaCelsius ) ( sensor2 : TemperaturaCelsius ) ( temperatura : TemperaturaCelsius ) ( presenca : Boolean ) ( statusAC : StatusEquipamento ) : ( arCondCmd : ComandoAC ) { body { actions : ModuloControleAN : ModuloControleACAN { using pins : media : TemperaturaCelsius ; presenca : Boolean ; alvo : TemperaturaCelsius ; } calcularTemperaturaMediaAN : calcularTemperaturaMediaAN { using pins : sensor1 : TemperaturaCelsius ; sensor2 : TemperaturaCelsius ; } flow from calcularTemperaturaMediaAN to media delegate sensor1 to sensor1 delegate sensor2 to sensor2 delegate arCondCmd to ModuloControleAN delegate temperatura to alvo delegate presenca to presenca } } activity def ModuloPresencaAC ( qtndPessoas : Int ) ( dadoPresenca : Boolean ) : ( alguemPresente : Boolean ) { body { actions : ModuloPresencaAN : ModuloPresencaAN { using pins : qtndPessoas : Int ; dadoPresenca : Boolean ; } delegate alguemPresente to ModuloPresencaAN delegate qtndPessoas to qtndPessoas delegate dadoPresenca to dadoPresenca } } activity def ModuloMonitoramentoArCondAC ( presenca : Boolean ) : ( statusAC : StatusEquipamento ) { body { actions : ModuloMonitoramentoArCOndAN : ModuloMonitoramentoArCondAN { using pins : presenca : Boolean ; } delegate presenca to presenca delegate statusAC to ModuloMonitoramentoArCOndAN } } action def ModuloPresencaAN ( qtndPessoas : Int , dadoPresenca : Boolean ) : Boolean { constraint : pre-condition ModuloPresencaEQ delegate ModuloPresencaAN to alguemPresente delegate dadoPresenca to qtndPessoas delegate qtndPessoas to presenca } action def ModuloMonitoramentoArCondAN ( presenca : Boolean ) : StatusEquipamento { constraint : pre-condition StatusEquipamentoEq delegate ModuloMonitoramentoArCondAN to statusEquipamento delegate presenca to presenca } 
	constraint ControlarLampadaEQ ( presenca : Boolean ) : ( lampadaCmd : CmdLampada ) {
		equation = (presenca == true) ?
		(lampadaCmd == CmdLampada::ligar_luzes) :
		(lampadaCmd == CmdLampada::desligar_luzes)
	} action def ControladorLampadaAN ( presenca : Boolean ) : CmdLampada { constraint : pre-condition ControlarLampadaEQ delegate presenca to presenca delegate ControladorLampadaAN to lampadaCmd } activity def ControladorLampadaAC ( presenca : Boolean ) : ( lampadaCmd : CmdLampada ) { body { actions : ControladorLampadaAN : ControladorLampadaAN { using pins : presenca : Boolean ; } delegate lampadaCmd to ControladorLampadaAN delegate presenca to presenca } } 
	constraint ModuloPresencaEQ ( presenca : Boolean , qtndPessoas : Int ) : ( alguemPresente : Boolean ) {
		equation = (presenca == true || qtndPessoas > 0)
	} 
	constraint StatusEquipamentoEq ( presenca : Boolean ) : ( statusEquipamento : StatusEquipamento ) {
		equation = (presenca == true) ?
		(statusEquipamento == StatusEquipamento::ligado) :
		(statusEquipamento == StatusEquipamento::desligado)
	} action def calcularTemperaturaMediaAN ( sensor1 : TemperaturaCelsius , sensor2 : TemperaturaCelsius ) : TemperaturaCelsius { constraint : pre-condition CalcularTemperaturaMediaEQ } action def ModuloControleACAN ( media : TemperaturaCelsius , presenca : Boolean , alvo : TemperaturaCelsius , statusAC : StatusEquipamento ) : ComandoAC { constraint : pre-condition ModuloControleACEQ } 
	constraint CalcularTemperaturaMediaEQ ( sensor1 : TemperaturaCelsius , sensor2 : TemperaturaCelsius ) : ( media : TemperaturaCelsius ) {
		equation = (media) == (sensor1 / 2 + sensor2 / 2)
	} constraint ModuloControleACEQ ( media : TemperaturaCelsius , alvo : TemperaturaCelsius , statusAC : StatusEquipamento , presenca : Boolean ) : ( comandoAC : ComandoAC ) {
		equation = (comandoAC) == (presenca == true ) ?
		(statusAC == StatusEquipamento::desligado ? 
			(comandoAC == ComandoAC::ligar_ar_condicionado) :
			(media > alvo ?
				(comandoAC == ComandoAC::diminuir_temperatura) :
				(comandoAC == ComandoAC::aumentar_temperatura)
			)
		) :
		(comandoAC == ComandoAC::desligar_ar_condicionado)
	} }